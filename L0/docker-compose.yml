version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: order_db
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Скрипт для инициализации БД
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d order_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper - необходим для Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka - брокер сообщений
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "orders:1:1" # Автоматически создаем топик 'orders'

  # Наш Go-сервис
  app:
    container_name: go_order_service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy # Запускаем сервис только после того, как БД будет готова
      kafka:
        condition: service_started
    environment:
      - DB_URL=postgres://user:password@postgres_db:5432/order_db?sslmode=disable
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC=orders
      - HTTP_PORT=8080

volumes:
  postgres_data:
